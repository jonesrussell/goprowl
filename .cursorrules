# Core Project Guidelines
Always use the project's import path github.com/jonesrussell/goprowl
Always implement proper interface abstractions following Go best practices
Always use uber-fx for dependency injection and application lifecycle management

# Dependency Injection & Application Structure
Always integrate uber-fx with Cobra commands properly:
  - Initialize fx.App in cmd/root.go's Execute() function
  - Use fx.Module for organizing dependencies
  - Handle both fx.App and cobra.Command errors appropriately
  - Ensure proper logger initialization before other dependencies
  - Use fx.WithLogger for consistent logging configuration

# Core Dependencies
Always use:
  - github.com/gocolly/colly/v2 for web crawling
  - github.com/gocolly/colly/v2/debug for debugging
  - bleve/v2 for search engine functionality
  - go.uber.org/zap for structured logging
  - github.com/prometheus/client_golang for metrics

# Concurrency & Safety
Always use sync.RWMutex for concurrent operations in storage implementations
Always use context.Context for cancellation and timeouts
Never skip error handling
Never use init() functions except for fx.Module registration

# Code Organization
Files named types.go should only contain interface and type definitions

# Component Separation
The separation of concerns is now:
search/engine/types.go: Interface and type definitions
search/engine/query.go: Query parsing and processing
search/engine/basic_search.go: Search implementation and relevancy calculation
search/crawlers/: Web crawling implementation
search/storage/: Storage backend implementations
metrics/: Application metrics and monitoring

# Command Structure
cmd/root.go: Main application setup and fx integration
cmd/<command>.go: Individual command implementations with proper DI

# Logging Standards
Always use structured logging with zap
Include relevant context in log fields
Use appropriate log levels (debug, info, warn, error)

# Error Handling
Always implement proper error handling and avoid panics
Use error wrapping with fmt.Errorf("context: %w", err)
Return errors rather than logging and continuing

# Testing & Quality
Run code through golangci-lint before suggesting changes
Implement unit tests for all components
Use mockery for interface mocking
Include integration tests where appropriate

# Metrics & Monitoring
Always implement prometheus metrics for key operations
Use proper metric types (counter, gauge, histogram)
Include component-specific metrics

# Documentation
Include godoc comments for exported types and functions
Maintain README.md with current setup instructions
Document configuration options
